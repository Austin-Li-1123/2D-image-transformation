/**
 * A class that runs implements several simple transformations on 2D image arrays.
 * <p>
 * This file contains stub code for your image transformation methods that are called by the main
 * class. You will do your work for this MP in this file.
 * <p>
 * Note that you can make several assumptions about the images passed to your functions, both by the
 * web front end and by our testing harness:
 * <ul>
 * <li>You will not be passed empty images.</li>
 * <li>All images will have even width and height.</li>
 * </ul>
 *
 * @see <a href="https://cs125.cs.illinois.edu/MP/4/">MP4 Documentation</a>
 */
public class Transform {

    /**
     * Default amount to shift an image's position. Not used by the testing suite, so feel free to
     * change this value.
     */
    public static final int DEFAULT_POSITION_SHIFT = 16;
    /**
     * Default amount to shift an image's position. Not used by the testing suite, so feel free to
     * change this value.
     */
    public static final int EIGHT = 8;
    /**
     * Default amount to shift an image's position. Not used by the testing suite, so feel free to
     * change this value.
     */
    public static final int SIXTEEN = 16;
    /**
     * Default amount to shift an image's position. Not used by the testing suite, so feel free to
     * change this value.
     */
    public static final int TF = 24;
    /**
     * Default amount to shift an image's position. Not used by the testing suite, so feel free to
     * change this value.
     */
    public static final int MAX = 255;

    /**
     * Default amount to shift an image's position. Not used by the testing suite, so feel free to
     * change this value.
     */
    public static final int LAST = 0xff;

    /**
     * Pixel value to use as filler when you don't have any valid data. All white with complete
     * transparency. DO NOT CHANGE THIS VALUE: the testing suite relies on it.
     */
    public static final int FILL_VALUE = 0x00FFFFFF;

    /**
     * Shift the image left by the specified amount.
     * <p>
     * Any pixels shifted in from off screen should be filled with FILL_VALUE. This function <i>does
     * not modify the original image</i>.
     *
     * @param originalImage the image to shift to the left
     * @param amount the amount to shift the image to the left
     * @return the shifted image
     */
    public static int[][] shiftLeft(final int[][] originalImage, final int amount) {
        int[][] result = new int[originalImage.length][originalImage[0].length];
        for (int i = 0; i < result.length; i++) {
            for (int j = 0; j < result[i].length; j++) {
                if (i + amount < result.length && i + amount >= 0) {
                    result[i][j] = originalImage[i + amount][j];
                } else {
                    result[i][j] = FILL_VALUE;
                }

            }
        }
        return result;
    }

    /*
     * Shift right like above.
     */
    /**
     * Shift the image left by the specified amount.
     * <p>
     * Any pixels shifted in from off screen should be filled with FILL_VALUE. This function <i>does
     * not modify the original image</i>.
     *
     * @param originalImage the image to shift to the left
     * @param amount the amount to shift the image to the left
     * @return the shifted image
     */
    public static int[][] shiftRight(final int[][] originalImage, final int amount) {


        int[][] result = new int[originalImage.length][originalImage[0].length];
        for (int i = 0; i < result.length; i++) {
            for (int j = 0; j < result[i].length; j++) {
                if (i - amount >= 0 && i - amount < result.length) {
                    result[i][j] = originalImage[i - amount][j];
                } else {
                    result[i][j] = FILL_VALUE;
                }

            }
        }
        return result;
    }


    /**
     * Shift up like above.
     */
    /**
     * Shift the image left by the specified amount.
     * <p>
     * Any pixels shifted in from off screen should be filled with FILL_VALUE. This function <i>does
     * not modify the original image</i>.
     *
     * @param originalImage the image to shift to the left
     * @param amount the amount to shift the image to the left
     * @return the shifted image
     */
    public static int[][] shiftUp(final int[][] originalImage, final int amount) {


        int[][] result = new int[originalImage.length][originalImage[0].length];
        for (int i = 0; i < result.length; i++) {
            for (int j = 0; j < result[0].length; j++) {
                if (j + amount < result[0].length && (j + amount) >= 0) {
                    result[i][j] = originalImage[i][j + amount];
                } else {
                    result[i][j] = FILL_VALUE;
                }


            }
        }
        return result;
    }


    /**
     * Shift down like above.
     */
    /**
     * Shift the image left by the specified amount.
     * <p>
     * Any pixels shifted in from off screen should be filled with FILL_VALUE. This function <i>does
     * not modify the original image</i>.
     *
     * @param originalImage the image to shift to the left
     * @param amount the amount to shift the image to the left
     * @return the shifted image
     */
    public static int[][] shiftDown(final int[][] originalImage, final int amount) {
        int[][] result = new int[originalImage.length][originalImage[0].length];
        for (int i = 0; i < result.length; i++) {
            for (int j = 0; j < result[i].length; j++) {
                if ((j - amount) >= 0 && j - amount < result[0].length) {
                    result[i][j] = originalImage[i][j - amount];
                } else {
                    result[i][j] = FILL_VALUE;
                }

            }
        }
        return result;
    }




    /**
     * Rotate the image left by 90 degrees around its center.
     * <p>
     * Any pixels rotated in from off screen should be filled with FILL_VALUE. This function <i>does
     * not modify the original image</i>.
     *
     * @param originalImage the image to rotate left 90 degrees
     * @return the rotated image
     */
    public static int[][] rotateRight(final int[][] originalImage) {
        int[][] result = new int[originalImage.length][originalImage[0].length];
        //int height = originalImage.length;
        //int width = originalImage[0].length;
           for (int i = 0; i < result.length; i++) {
               for (int j = 0; j < result[i].length; j++) {
                   if (((originalImage.length - 1 - i >= 0) && (j < result.length))
                           && ((originalImage.length - 1 - i) < result[0].length)) {
                       result[i][j] = originalImage[j][originalImage.length - 1 - i];
                   }
               }
           }
           return result;
    }

    /*
     * Rotate the image right like above.
     */
    /**
     * Rotate the image left by 90 degrees around its center.
     * <p>
     * Any pixels rotated in from off screen should be filled with FILL_VALUE. This function <i>does
     * not modify the original image</i>.
     *
     * @param originalImage the image to rotate left 90 degrees
     * @return the rotated image
     */
    public static int[][] rotateLeft(final int[][] originalImage) {
        int[][] result = new int[originalImage.length][originalImage[0].length];
        //int height = originalImage.length;
        //int width = originalImage[0].length;
           for (int i = 0; i < result.length; i++) {
               for (int j = 0; j < result[0].length; j++) {

                   if (((originalImage.length - 1 - i >= 0) && (i < result[0].length))
                           && ((originalImage.length - 1 - j) < result.length - 1)) {
                       result[i][j] = originalImage[originalImage.length - 1 - j][i];
                   }
               }
           }
           return result;
    }

    /*
     * Flip the image on the vertical axis across its center.
     */
    /**
     * Rotate the image left by 90 degrees around its center.
     * <p>
     * Any pixels rotated in from off screen should be filled with FILL_VALUE. This function <i>does
     * not modify the original image</i>.
     *
     * @param originalImage the image to rotate left 90 degrees
     * @return the rotated image
     */
    public static int[][] flipVertical(final int[][] originalImage) {
     int[][] result = new int[originalImage.length][originalImage[0].length];
     //int height = originalImage.length;
     //int width = originalImage[0].length;
        for (int i = 0; i < result.length; i++) {
            for (int j = 0; j < result[0].length; j++) {
               result[i][j] = originalImage[i][originalImage[0].length - 1 - j];

            }
        }
        return result;
    }

    /*
     * Flip the image on the horizontal axis across its center.
     */
    /**
     * Rotate the image left by 90 degrees around its center.
     * <p>
     * Any pixels rotated in from off screen should be filled with FILL_VALUE. This function <i>does
     * not modify the original image</i>.
     *
     * @param originalImage the image to rotate left 90 degrees
     * @return the rotated image
     */
    public static int[][] flipHorizontal(final int[][] originalImage) {

        int[][] result = new int[originalImage.length][originalImage[0].length];
        //int height = originalImage.length;
        //int width = originalImage[0].length;
           for (int i = 0; i < result.length; i++) {
               for (int j = 0; j < result[0].length; j++) {
                   result[i][j] = originalImage[originalImage.length - 1 - i][j];

               }
           }
           return result;

    }

    /**
     * Default amount to shift colors by. Not used by the testing suite, so feel free to change this
     * value.
     */
    public static final int DEFAULT_COLOR_SHIFT = 32;

    /**
     * Add red to the image.
     * <p>
     * This function <i>does not modify the original image</i>. It should also not generate any new
     * filled pixels.
     *
     * @param originalImage the image to add red to
     * @param amount the amount of red to add
     * @return the recolored image
     */
    public static int[][] moreRed(final int[][] originalImage, final int amount) {

           int[][] result = new int[originalImage.length][originalImage[0].length];
        for (int i = 0; i < result.length; i++) {
            for (int j = 0; j < result[0].length; j++) {
                if (((originalImage[i][j]) & LAST) + amount <= MAX) {
                result[i][j] = originalImage[i][j] + (amount);
            } else {
                result[i][j] = originalImage[i][j] + (MAX - (originalImage[i][j]) & LAST);
            }
        }
        }
        return result;

    }

    /*
     * Remove red from the image.
     */
    /**
     * Shift the image left by the specified amount.
     * <p>
     * Any pixels shifted in from off screen should be filled with FILL_VALUE. This function <i>does
     * not modify the original image</i>.
     *
     * @param originalImage the image to shift to the left
     * @param amount the amount to shift the image to the left
     * @return the shifted image
     */
    public static int[][] lessRed(final int[][] originalImage, final int amount) {


        int[][] result = new int[originalImage.length][originalImage[0].length];
        for (int i = 0; i < result.length; i++) {
            for (int j = 0; j < result[0].length; j++) {
                if (((originalImage[i][j]) & LAST) >= amount) {
                    result[i][j] = originalImage[i][j] - amount;
                } else {
                    result[i][j] = originalImage[i][j] - ((originalImage[i][j]) & LAST);
                }
              //      result[i][j] = (originalImage[i][j] + (amount << EIGHT))
              //              | (originalImage[i][j] + (amount << SIXTEEN));
              //  }
            }
        }
        return result;

    }

    /*
     * Add green to the image.
     */
    /**
     * Shift the image left by the specified amount.
     * <p>
     * Any pixels shifted in from off screen should be filled with FILL_VALUE. This function <i>does
     * not modify the original image</i>.
     *
     * @param originalImage the image to shift to the left
     * @param amount the amount to shift the image to the left
     * @return the shifted image
     */
    public static int[][] moreGreen(final int[][] originalImage, final int amount) {

int[][] result = new int[originalImage.length][originalImage[0].length];
for (int i = 0; i < result.length; i++) {
            for (int j = 0; j < result[0].length; j++) {
                if (((originalImage[i][j] >> EIGHT) & LAST) + amount <= MAX) {
                result[i][j] = originalImage[i][j] + (amount << EIGHT);
            } else {
                result[i][j] = originalImage[i][j]
                        + ((MAX - (originalImage[i][j] >> EIGHT) & LAST) << EIGHT);
            }
        }
}
        return result;
    }

    /*
     * Remove green from the image.
     */
    /**
     * Shift the image left by the specified amount.
     * <p>
     * Any pixels shifted in from off screen should be filled with FILL_VALUE. This function <i>does
     * not modify the original image</i>.
     *
     * @param originalImage the image to shift to the left
     * @param amount the amount to shift the image to the left
     * @return the shifted image
     */
    public static int[][] lessGreen(final int[][] originalImage, final int amount) {

        int[][] result = new int[originalImage.length][originalImage[0].length];
        for (int i = 0; i < result.length; i++) {
            for (int j = 0; j < result[0].length; j++) {
                if (((originalImage[i][j] >> EIGHT) & LAST) >= amount) {

                result[i][j] = originalImage[i][j] - (amount << EIGHT);
                } else {
                    result[i][j] = originalImage[i][j]
                            - (((originalImage[i][j] >> EIGHT) & LAST) << EIGHT);
                }
              //      result[i][j] = (originalImage[i][j] + (amount << EIGHT))
              //              | (originalImage[i][j] + amount);

            }
        }
        return result;
    }

    /*
     * Add blue to the image.
     */
    /**
     * Shift the image left by the specified amount.
     * <p>
     * Any pixels shifted in from off screen should be filled with FILL_VALUE. This function <i>does
     * not modify the original image</i>.
     *
     * @param originalImage the image to shift to the left
     * @param amount the amount to shift the image to the left
     * @return the shifted image
     */
    public static int[][] moreBlue(final int[][] originalImage, final int amount) {

 int[][] result = new int[originalImage.length][originalImage[0].length];
        for (int i = 0; i < result.length; i++) {
            for (int j = 0; j < result[0].length; j++) {
                if (((originalImage[i][j] >> SIXTEEN) & LAST) + amount <= MAX) {
                result[i][j] = originalImage[i][j] + (amount << SIXTEEN);
                } else {
                    result[i][j] = originalImage[i][j]
                            + ((MAX - (originalImage[i][j] >> SIXTEEN) & LAST) << SIXTEEN);
                }
            }
        }
        return result;
    }

    /*
     * Remove blue from the image.
     */
    /**
     * Shift the image left by the specified amount.
     * <p>
     * Any pixels shifted in from off screen should be filled with FILL_VALUE. This function <i>does
     * not modify the original image</i>.
     *
     * @param originalImage the image to shift to the left
     * @param amount the amount to shift the image to the left
     * @return the shifted image
     */
    public static int[][] lessBlue(final int[][] originalImage, final int amount) {
            int[][] result = new int[originalImage.length][originalImage[0].length];
        for (int i = 0; i < result.length; i++) {
            for (int j = 0; j < result[0].length; j++) {
                if (((originalImage[i][j] >> SIXTEEN) & LAST) >= amount) {
                    result[i][j] = originalImage[i][j] - (amount << SIXTEEN);
                } else {
                    result[i][j] = originalImage[i][j]
                            - (((originalImage[i][j] >> SIXTEEN) & LAST) << SIXTEEN);
                //            | (originalImage[i][j] + amount);
                }
            }
        }
        return result;
}

    /*
     * Increase the image alpha channel.
     */
    /**
     * Shift the image left by the specified amount.
     * <p>
     * Any pixels shifted in from off screen should be filled with FILL_VALUE. This function <i>does
     * not modify the original image</i>.
     *
     * @param originalImage the image to shift to the left
     * @param amount the amount to shift the image to the left
     * @return the shifted image
     */
    public static int[][] moreAlpha(final int[][] originalImage, final int amount) {
        int[][] result = new int[originalImage.length][originalImage[0].length];
        for (int i = 0; i < result.length; i++) {
            for (int j = 0; j < result[0].length; j++) {
                if (((originalImage[i][j] >> TF) & LAST) + amount <= MAX) {
               // if ((((originalImage[i][j] >> TF) & LAST) + amount) <= MAX) {
                    result[i][j] = originalImage[i][j] + (amount << TF);
               } else {
                    result[i][j] = originalImage[i][j]
                            + ((MAX - ((originalImage[i][j] >> TF) & LAST)) << TF);
                }
            }
        }
        return result;
    }

    /*
     * Decrease the image alpha channel.
     */
    /**
     * Shift the image left by the specified amount.
     * <p>
     * Any pixels shifted in from off screen should be filled with FILL_VALUE. This function <i>does
     * not modify the original image</i>.
     *
     * @param originalImage the image to shift to the left
     * @param amount the amount to shift the image to the left
     * @return the shifted image
     */
    public static int[][] lessAlpha(final int[][] originalImage, final int amount) {
        int[][] result = new int[originalImage.length][originalImage[0].length];
        for (int i = 0; i < result.length; i++) {
            for (int j = 0; j < result[0].length; j++) {
                if (((originalImage[i][j] >> TF) & LAST) >= amount) {
                result[i][j] = originalImage[i][j] - (amount << TF);
            } else {
                result[i][j] = originalImage[i][j] - (((originalImage[i][j] >> TF) & LAST) << TF);
            }
            }
        }
        return result;
    }

    /**
     * The default resize factor. Not used by the testing suite, so feel free to change this value.
     */
    public static final int DEFAULT_RESIZE_AMOUNT = 2;

    /**
     * Shrink in the vertical axis around the image center.
     * <p>
     * An amount of 2 will result in an image that is half its original height. An amount of 3 will
     * result in an image that's a third of its original height. Any pixels shrunk in from off
     * screen should be filled with FILL_VALUE. This function <i>does not modify the original
     * image</i>.
     *
     * @param originalImage the image to shrink
     * @param amount the factor by which the image's height is reduced
     * @return the shrunken image
     */
    public static int[][] shrinkVertical(final int[][] originalImage, final int amount) {
        int[][] result = new int[originalImage.length / amount][originalImage[0].length];
        //for (int i = 0; i < result.length; i++) {
            //for (int j = 0; j < result[0].length; j++) {
                //int x = (i - ((originalImage.length - 1) / 2));
                //int y = (((originalImage[0].length - 1) / 2) - j);

            //}
    //    }


        return result;
    }

    /*
     * Expand in the vertical axis around the image center.
     */

    /**
     * Shift the image left by the specified amount.
     * <p>
     * Any pixels shifted in from off screen should be filled with FILL_VALUE. This function <i>does
     * not modify the original image</i>.
     *
     * @param originalImage the image to shift to the left
     * @param amount the amount to shift the image to the left
     * @return the shifted image
     */
    public static int[][] expandVertical(final int[][] originalImage, final int amount) {
        return null;
    }

    /*
     * Shrink in the horizontal axis around the image center.
     */
    /**
     * Shift the image left by the specified amount.
     * <p>
     * Any pixels shifted in from off screen should be filled with FILL_VALUE. This function <i>does
     * not modify the original image</i>.
     *
     * @param originalImage the image to shift to the left
     * @param amount the amount to shift the image to the left
     * @return the shifted image
     */
    public static int[][] shrinkHorizontal(final int[][] originalImage, final int amount) {
        return null;
    }

    /*
     * Expand in the horizontal axis around the image center.
     */
    /**
     * Shift the image left by the specified amount.
     * <p>
     * Any pixels shifted in from off screen should be filled with FILL_VALUE. This function <i>does
     * not modify the original image</i>.
     *
     * @param originalImage the image to shift to the left
     * @param amount the amount to shift the image to the left
     * @return the shifted image
     */
    public static int[][] expandHorizontal(final int[][] originalImage, final int amount) {
        return null;
    }

    /**
     * Remove a green screen mask from an image.
     * <p>
     * This function should remove primarily green pixels from an image and replace them with
     * transparent pixels (FILL_VALUE), allowing you to achieve a green screen effect. Obviously
     * this function will destroy pixels, but it <i>does not modify the original image</i>.
     * <p>
     * While this function is tested by the test suite, only extreme edge cases are used. Getting it
     * work work will with real green screen images is left as a challenge for you.
     *
     * @param originalImage the image to remove a green screen from
     * @return the image with the green screen removed
     */
    public static int[][] greenScreen(final int[][] originalImage) {
        int[][] result = new int[originalImage.length][originalImage[0].length];
        for (int i = 0; i < result.length; i++) {
            for (int j = 0; j < result[0].length; j++) {


                    //result[i][j] = (originalImage[i][j] & 0xFFFF00FF);
                if (((originalImage[i][j] >> EIGHT) & LAST) == MAX) {
                    result[i][j] = FILL_VALUE;
               } else {
                result[i][j] = originalImage[i][j];
               }
            }
        }
        return result;
    }


    /**
     * A wild and mysterious image transform.
     * <p>
     * You are free to implement this in any way you want. It is not tested rigorously by the test
     * suite, but it should do something (change the original image) and <i>not modify the original
     * image</i>.
     * <p>
     * Call this function mystery. It should take only the original image as a single argument and
     * return a modified image.
     *
     * @param originalImage the image to perform a strange and interesting transform on
     * @return the image transformed in wooly and frightening ways
     */

    public static int[][] mystery(final int[][] originalImage) {
        return null;

    }
    }



